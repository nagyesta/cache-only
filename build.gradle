plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
    id 'maven-publish'
    id 'io.freefair.lombok' version '5.3.0'
    id 'io.toolebox.git-versioner' version '1.6.5'
}

group = 'com.github.nagyesta'

project.ext {
    gitToken = project.hasProperty('githubToken') ? (project.property('githubToken') as String) : ''
    gitUser = project.hasProperty('githubUser') ? (project.property('githubUser') as String) : ''
    artifactDisplayName = "Cache-Only"
    artifactDescription = "Cache-Only is a minimal library augmenting the Spring cache abstraction with a way for caching bulk API calls."
    repoUrl = 'https://github.com/nagyesta/cache-only'
    licenseName = 'MIT License'
    licenseUrl = 'https://raw.githubusercontent.com/nagyesta/cache-only/main/LICENSE'
    maintainerId = 'nagyesta'
    maintainerName = 'Istvan Zoltan Nagy'

    // dependency versions
    lombokVersion = '1.18.16'
    jupiterVersion = '5.7.0'
    mockitoCoreVersion = '3.6.0'
    slf4jApiVersion = '1.7.30'
    springVersion = '4.2.0.RELEASE'
    springTestVersion = '5.2.12.RELEASE'
    jetbrainsAnnotationVersion = '20.1.0'
    commonsCollectionsVersion = '4.4'
    logbackVersion = '1.2.3'
}

versioner {
    startFrom {
        major = 0
        minor = 0
        patch = 1
    }
    match {
        major = '{major}'
        minor = '{minor}'
        patch = '{patch}'
    }
    pattern {
        pattern = "%M.%m.%p"
    }
    git {
        authentication {
            https {
                token = project.ext.gitToken
            }
        }
    }
    tag {
        prefix = 'v'
        useCommitMessage = true
    }
}

versioner.apply()
sourceCompatibility = '8'

repositories {
    mavenCentral()
}

java {
    withJavadocJar()
    withSourcesJar()
}

dependencies {
    annotationProcessor "org.projectlombok:lombok:${project.ext.lombokVersion}"
    compileOnly "org.jetbrains:annotations:${project.ext.jetbrainsAnnotationVersion}"
    testCompileOnly "org.jetbrains:annotations:${project.ext.jetbrainsAnnotationVersion}"
    implementation "org.slf4j:slf4j-api:${project.ext.slf4jApiVersion}"
    implementation "org.apache.commons:commons-collections4:${project.ext.commonsCollectionsVersion}"
    implementation "org.springframework:spring-context-support:${project.ext.springVersion}"
    testImplementation "org.junit.jupiter:junit-jupiter:${project.ext.jupiterVersion}"
    testImplementation "org.mockito:mockito-core:${project.ext.mockitoCoreVersion}"
    testImplementation "org.springframework:spring-test:${project.ext.springTestVersion}"
    testImplementation "org.springframework:spring-context-support:${project.ext.springTestVersion}"
    testImplementation "ch.qos.logback:logback-classic:${project.ext.logbackVersion}"
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("$buildDir/reports/jacoco/report.xml")
        csv.enabled false
        html.enabled true
    }
}


test {
    useJUnitPlatform()
}
test.finalizedBy jacocoTestReport
jacocoTestReport.finalizedBy jacocoTestCoverageVerification

jacoco {
    toolVersion = "0.8.2"
}

jacocoTestCoverageVerification {
    inputs.file(file("${buildDir}/reports/jacoco/report.xml") as String)
    outputs.file(file("${buildDir}/reports/jacoco/jacocoTestCoverageVerification") as String)

    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            excludes = [
            ]
        }
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.5
            }
            excludes = [
                    "com.github.nagyesta.cacheonly.raw.BatchServiceCaller",
                    "com.github.nagyesta.cacheonly.transform.NoOpPartialCacheSupport"
            ]
        }
    }
    doLast {
        file("${buildDir}/reports/jacoco/jacocoTestCoverageVerification").write("Passed")
    }
}
jar.dependsOn check

tasks.withType(Checkstyle) {
    configProperties = [base_dir: rootDir.toString(), cache_file: file("${buildDir}/checkstyle/cacheFile")]
    reports {
        xml.enabled false
        html.enabled true
        html.stylesheet resources.text
                .fromFile(project.file('config/checkstyle/checkstyle-stylesheet.xsl') as String)
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/nagyesta/cache-only")
            credentials {
                username = project.ext.gitUser
                password = project.ext.gitToken
            }
        }
    }
    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            from components.java
            artifactId = "${project.name}"
            pom {
                name = "${project.artifactDisplayName}"
                description = "${project.artifactDescription}"
                url = project.ext.repoUrl
                licenses {
                    license {
                        name = project.ext.licenseName
                        url = project.ext.licenseUrl
                    }
                }
                developers {
                    developer {
                        id = project.ext.maintainerId
                        name = project.ext.maintainerName
                    }
                }
                withXml {
                    asNode().dependencies.'*'.findAll() {
                        it.scope.text() == 'runtime'
                    }.each { it.scope*.value = 'compile' }
                }
            }
        }
    }
}

//Disable metadata publishing and rely on Maven only
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}
